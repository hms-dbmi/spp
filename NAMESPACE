import(caTools, parallel, graphics, stats, Rcpp)
importFrom("utils", "installed.packages", "write.table")

#export(t.find.min.saturated.enr)
#export(points_withinFunction)
export(points_within)
#export(t.plotavcc)
#export(t.plotavccl)
#export(t.plotcc)
#export(t.plotchrcc)
#export(t.plotchrccl)
#export(t.precalculate.ref.peak.agreement)
#export(window.chr.call.mirror.binding)
#export(window.call.mirror.binding)
#export(window.tag.count)
#export(window.tag.count.around)
#export(lwcc)
#export(wtd)

export(read.eland.tags)
export(read.tagalign.tags)
export(read.short.arachne.tags)
export(read.arachne.tags)
export(read.bowtie.tags)
export(read.bam.tags)
export(read.helicos.tags)
export(read.maqmap.tags)
export(read.bin.maqmap.tags)
export(read.meland.tags)
# export(remove.tag.anomalies)
export(remove.local.tag.anomalies)
export(get.binding.characteristics)
export(select.informative.tags)
export(find.binding.positions)
export(get.smoothed.tag.density)
export(get.smoothed.enrichment.mle)
export(get.smoothed.enrichment.mle2)
export(get.conservative.fold.enrichment.profile)
export(get.conservative.fold.enrichment.profile2)
export(writewig)
export(get.mser)
export(get.mser.interpolation)
export(output.binding.results)
# export(tag.scc)
# export(show.scc)
# export(find.significantly.enriched.regions)
# export(tag.enrichment.clusters)
# export(lwcc.prediction)
# export(tag.wtd)
# export(tag.block.shuffle)
# export(tag.lwcc)
# export(generate.randomized.data)
# export(determine.lwcc.threshold)
# export(get.relative.coordinates)
# export(get.eval.fdr.vectors)
# export(filter.binding.sites)
# export(get.subsample.chain.calls)
# export(mser.chain.interpolation)
# export(chain.to.reference.comparison)
# export(calculate.enrichment.estimates)
# export(dataset.density.ratio)
# export(dataset.density.size)
# export(old.dataset.density.ratio)
 export(densum)
# export(filter.singular.positions.by.local.density)
# export(mbs.enrichment.bounds)
# export(binomial.proportion.ratio.bounds)
# export(write.probe.wig)
# export(regionset.intersection.c)
export(add.broad.peak.regions)
export(write.narrowpeak.binding)
export(get.broad.enrichment.clusters)
export(write.broadpeak.info)
# export(get.clusters2)
useDynLib(spp,.registration = TRUE)
